Given a cost matrix cost[][] and a position (n, n) in cost[][], write a function that returns cost of minimum cost path to reach (n, n) from (0, 0). Each cell of 
the matrix represents a cost to traverse through that cell. The total cost of a path to reach (n, n) is the sum of all the costs on that path (including both 
source and destination). You can only traverse down, right and diagonally lower cells from a given cell, i.e., from a given cell (i, j), cells (i+1, j), (i, j+1), 
and (i+1, j+1) can be traversed. You may assume that all costs are positive integers.

Solution -
Language :- C++

int maximumPath(int N, vector<vector<int>> Matrix) {
        int dp[2][N];
        for (int i = 0; i < N; i++) {
            dp[0][i] = INT_MAX;
            dp[1][i] = INT_MAX;
        }
        
        for (int i = 0; i < N; i++) {
            int row = i&1;
            for (int j = 0; j  < N; j++) {
                if((i == 0) && (j == 0)) 
                    dp[row][j] = Matrix[i][j];
                else if(i == 0) 
                    dp[row][j] = dp[row][j - 1] + Matrix[i][j];
                else if(j == 0)
                    dp[row][j] = dp[1 - row][j] + Matrix[i][j];
                else 
                    dp[row][j] = max({dp[1 - row][j - 1], dp[row][j - 1], dp[1 - row][j]}) + Matrix[i][j];
            }
        }
        return dp[1 - (N&1)][N - 1];
}


Space Complexity :-   O(N)
Time Complexity :-   O(N*N)
