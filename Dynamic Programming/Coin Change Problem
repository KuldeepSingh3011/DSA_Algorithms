Given a value N, find the number of ways to make change for N cents, if we have infinite supply of each of S = { S1, S2, .. , SM } valued coins. 

Example 1:
Input:
n = 4 , m = 3
S[] = {1,2,3}
Output: 4
Explanation: Four Possible ways are:
{1,1,1,1},{1,1,2},{2,2},{1,3}.


Solution:-


long long int count( int s[], int m, int n )
    {
        sort(s, s + m);
        long long int dp[n + 1][m + 1];
        memset(dp, 0, sizeof(dp));
        for (int i = 0; i <= n; i++) {
            for (int j = 0; j <= m; j++) {
                if(i == 0)
                    dp[i][j] = 1;
                else if(j == 0)
                    continue;
                else if (s[j - 1] <= i)
                    dp[i][j] = dp[i - s[j - 1]][j] + dp[i][j - 1];
                else 
                    dp[i][j] = dp[i][j - 1];
            }
        }
        return dp[n][m];
}

Time Complexity :-  O(N*M)
Space Complexity :- O(N*M)


Space Optimized solution:-

long long int count( int s[], int m, int n )
    {
        sort(s, s + m);
        long long int dp[n + 1];
        memset(dp, 0, sizeof(dp));
        dp[0] = 1;
        for(int i = 0; i < m; i++) {
            for(int j = s[i]; j <= n; j++) {
                dp[j] += dp[j - s[i]];
            }
        }
        return dp[n];
}

Time Complexity :-  O(N*M)
Space Complexity :- O(N)


